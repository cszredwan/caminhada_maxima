#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 28 20:06:40 2021


"""

# Modules
import sys
import networkx as nx
from scipy.optimize import linprog as lp
from math import inf
import time
import random
import warnings
warnings.filterwarnings("ignore")

# Reading from stdin
data = sys.stdin.read()
#data = ''
#with open(sys.argv[1], 'r') as f:
#    data = f.read()
data = data.split()

# number of vertices
n = int(data[0])

# Creating empty weighted graph
G = nx.Graph()

## Populating weighted graph G
index = 0
for i in range(1,n):
    for j in range(i+1,n+1):
        index += 1
        w = float(data[index])
        if w > 0.0:
            G.add_edge(i,j,weight=float(data[index]))
        else:
            pass

def random_graph(n,p=0.80,q=100):
   
    G = nx.Graph()

    for i in range(1,n):
        for j in range(1+1,n+1):
            if random.random() < p:
                w = random.randint(1,q)
                G.add_edge(i,j,weight=w)

    return G

def is_cycle(L):
    
    if len(L) < 3:
        return False
        
    if L[0] != L[-1]:
        return False
        
    for i in L:
        if i != 1 and L.count(i) > 1:
            return "Infeseable"
        
    return True

def backtrack_max_cycle(G):
    
    contador_de_nos = 1
    
    opt_cycle = []
    opt       = -inf
    
    def recursive_backtrack_max_cycle(L):
        
        nonlocal opt_cycle
        nonlocal opt
        nonlocal contador_de_nos
        
        answer = is_cycle(L)
        #print(L,answer)
        if answer == True:
            total_weight = 0.0
            for i in range(len(L)-1):
                total_weight += G[L[i]][L[i+1]]["weight"]
                
            #print(total_weight)
                
            if total_weight > opt:
                opt = total_weight
                opt_cycle = L
                return
            
        elif answer == "Infeseable":
            return
        
        elif answer == False:
        
            start = L[0]
            end = L[-1]
            neighbors = [v for v in G[end]]
            
            if len(neighbors) == 0:
                return
            
            for v in neighbors:
                if v == start or v not in L:
                    contador_de_nos += 1
                    recursive_backtrack_max_cycle(L + [v])

    start = time.time()
    
    recursive_backtrack_max_cycle([1,])
    
    end = time.time()
    
    print("Relatorio da execucao do algoritmo de backtrack",file=sys.stderr)
    print("Otimo encontrado eh {}".format(opt),file=sys.stderr)
    print("Ciclo otimo encontrado eh {}".format(opt_cycle),file=sys.stderr)
    print("Numero total de nos visitados: {}".format(contador_de_nos),file=sys.stderr)
    print("Tempo total de execucao: {}".format(end-start),file=sys.stderr)
    
    print(opt)
    cycle_str = '1'
    for v in opt_cycle[1:]:
        cycle_str += (' ' + str(v))
    print(cycle_str)    

def branch_and_bound_max_cycle(G):
    """
    Recebe um grafo da classe nx.Graph
    com pesos identificados pela palavra 'weight'
    e devolve o ciclo maximo, o otimo obtido,
    o numero de nos da arvore e o tempo total de execucao.
    """
    
    contador_de_nos = 1
    contador_nos_cortados = 0
    
    opt_cycle = []
    opt       = 0

    # Criando o grafo auxiliar G0
    G0 = nx.Graph()
    for (i,j) in G.edges():
        G0.add_edge(i,j,weight=G[i][j]["weight"])
    ## Adicionando vertice 0 em G0
    for j in [v for v in G[1]]:
        G0.add_edge(0,j,weight=G[1][j]["weight"])

    def upper_bound(L):
        """
        Retorna um limitante superior para o problema
        do ciclo de tamanho mÃ¡ximo.
        
        Usa a estrategia de duplicacao do no 1 para ser fonte,
        e insere o no 0 para ser sorvedouro.
        """
        
        nonlocal G0
        
        A_le = []
        b_le = []
        
        A_eq = []
        b_eq = []
        
        c = []
        
        n = G0.number_of_nodes()
        nodes = [v for v in G0.nodes()]
        edges = [e for e in G0.edges()]
        
        I1 = [ (i,j) for i in range(0,n) for j in range(i+1,n+1) ]
        I2 = [ (j,i) for i in range(0,n) for j in range(i+1,n+1) ]
        I = I1 + I2
        
        # Funcao de custo
        for (i,j) in I:
            if (i,j) in edges or (j,i) in edges:
                c.append(-G0[i][j]["weight"])
            else:
                c.append(0)
    
        # Restricoes das arestas iguais a zero
        for (i,j) in I:
            if ((i,j) in edges) or ((j,i) in edges):
                a_le = []
                for e in I:
                    if e == (i,j):
                        a_le.append(1)
                    elif e != (i,j):
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
            else:
                a_eq = []
                for e in I:
                    if e == (i,j):
                        a_eq.append(1)
                    elif e != (i,j):
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
                
        # Restricoes do caminho/ciclo L
        answer = is_cycle(L)
        if answer == True:        
            total_weight = 0.0
            for i in range(len(L)-1):
                total_weight += G0[L[i]][L[i+1]]["weight"]
            return total_weight    
        elif answer == False:
            edges_on_L = []        
            if len(L) > 1:
                for index in range(len(L)-1):
                    edges_on_L.append((L[index], L[index+1]))
                for (i,j) in edges_on_L:
                    a_eq = []
                    for e in I:
                        if e == (i,j):
                            a_eq.append(1)
                        elif e != (i,j):
                            a_eq.append(0)
                    A_eq.append(a_eq)
                    b_eq.append(1)
        
        # o maximo da entrada em cada vertice eh igual a 1
        for v in nodes:
            if v == 1:
                # a somatoria dos arcos de entrada em 1
                # deve ser exatamente 0
                a_eq = []
                for (i,j) in I:
                    if j == v:
                        a_eq.append(1)
                    elif j != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
                
                # a somatoria dos arcos de saida em 1 deve ser
                # exatamente 1
                a_eq = []
                for (i,j) in I:
                    if i == v:
                        a_eq.append(1)
                    elif i != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(1)
                
            if v == 0:            
                # a somatoria dos arcos de entrada em 0
                # deve ser exatamente 1
                a_eq = []
                for (i,j) in I:
                    if j == v:
                        a_eq.append(1)
                    elif j != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(1)
                
                # a somatoria dos arcos de saida em 0 deve ser
                # exatamente 0
                a_eq = []
                for (i,j) in I:
                    if i == v:
                        a_eq.append(1)
                    elif i != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
                
            elif v not in [0,1]:
                # a somatoria dos arcos de entrada em 1 deve ser
                # menor ou igual a 1
                a_le = []
                for (i,j) in I:
                    if j == v:
                        a_le.append(1)
                    elif j != v:
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
                
                # a somatoria dos arcos de saida em 1 deve ser
                # menor ou igual a 1
                a_le = []
                for (i,j) in I:
                    if i == v:
                        a_le.append(1)
                    elif i != v:
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
                
                # Conservacao do fluxo
                a_eq = []
                for (i,j) in I:
                    if i == v:
                        a_eq.append(1)
                    elif j == v:
                        a_eq.append(-1)
                    else:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
            
        # nao pode usar dois arcos com o mesmas extremidades
        for e in edges:
            if (1 not in e) and (0 not in e):
                u = e[0]
                v = e[1]
                a_le = []
                for (i,j) in I:
                    if (i == u and j == v) or (i == v and j == u):
                        a_le.append(1)
                    else:
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
    
        '''
        # impedir "falso ciclo"
        for v in [u for u in G0[1]]:
            a_le = []
            for (i,j) in I:
                if (i,j) == (1,v) or (i,j) == (v,0):
                    a_le.append(1)
                else:
                    a_le.append(0)
            A_le.append(a_le)
            b_le.append(1)
        '''
    
        X = lp(c, A_le, b_le, A_eq, b_eq,method="revised simplex")
        
        if X["status"] == 0:
            return -X['fun']
        elif X["status"] == 2:
            return (-inf)

    def recursive_branch_and_bound_max_cycle(L):

        nonlocal G
        nonlocal opt_cycle
        nonlocal opt
    
        nonlocal contador_de_nos
        nonlocal contador_nos_cortados
        
        answer = is_cycle(L)
        #print(L,answer)
        if answer == True:
            total_weight = 0.0
            for i in range(len(L)-1):
                total_weight += G[L[i]][L[i+1]]["weight"]
            
            #print(total_weight)
        
            if total_weight > opt:

                opt = total_weight
                opt_cycle = L
                return
        
        elif answer == "Infeseable":
            return
    
        elif answer == False:
        
            start = L[0]
            end = L[-1]
            neighbors = [v for v in G[end]]
        
            if len(neighbors) == 0:
                return
        
            for v in neighbors:
                if v == start or v not in L:
                
                    contador_de_nos += 1
                
                    B = upper_bound(L + [v])
                    #print("Bound for {} is {}".format(L+[v],B),file=sys.stderr)
                    if B >= opt:
                        recursive_branch_and_bound_max_cycle(L + [v])
                    elif B < opt:
                        contador_nos_cortados += 1
                        #print("Cut branch {}".format(L+[v]),file=sys.stderr)
    
    start = time.time()
    
    recursive_branch_and_bound_max_cycle([1])
    
    end = time.time()
    
    print("Relatorio da execucao do algoritmo de branch-and-bound",file=sys.stderr)
    print("Otimo encontrado eh {}".format(opt),file=sys.stderr)
    print("Ciclo otimo encontrado eh {}".format(opt_cycle),file=sys.stderr)
    print("Numero total de nos visitados: {}".format(contador_de_nos),file=sys.stderr)
    print("Numero total de nos cortados: {}".format(contador_nos_cortados),file=sys.stderr)
    print("Tempo total de execucao: {}".format(end-start),file=sys.stderr)
    
    print(opt)
    cycle_str = '1'
    for v in opt_cycle[1:]:
        cycle_str += (' ' + str(v))
    print(cycle_str)    
    
def ordered_branch_and_bound_max_cycle(G):
    """
    Recebe um grafo da classe nx.Graph
    com pesos identificados pela palavra 'weight'
    e devolve o ciclo maximo, o otimo obtido,
    o numero de nos da arvore e o tempo total de execucao.
    """
    
    contador_de_nos = 1
    contador_nos_cortados = 0
    
    opt_cycle = []
    opt       = 0

    # Criando o grafo auxiliar G0
    G0 = nx.Graph()
    for (i,j) in G.edges():
        G0.add_edge(i,j,weight=G[i][j]["weight"])
    ## Adicionando vertice 0 em G0
    for j in [v for v in G[1]]:
        G0.add_edge(0,j,weight=G[1][j]["weight"])

    def upper_bound(L):
        """
        Retorna um limitante superior para o problema
        do ciclo de tamanho mÃ¡ximo.
        
        Usa a estrategia de duplicacao do no 1 para ser fonte,
        e insere o no 0 para ser sorvedouro.
        """
        
        nonlocal G0
        
        A_le = []
        b_le = []
        
        A_eq = []
        b_eq = []
        
        c = []
        
        n = G0.number_of_nodes()
        nodes = [v for v in G0.nodes()]
        edges = [e for e in G0.edges()]
        
        I1 = [ (i,j) for i in range(0,n) for j in range(i+1,n+1) ]
        I2 = [ (j,i) for i in range(0,n) for j in range(i+1,n+1) ]
        I = I1 + I2
        
        # Funcao de custo
        for (i,j) in I:
            if (i,j) in edges or (j,i) in edges:
                c.append(-G0[i][j]["weight"])
            else:
                c.append(0)
    
        # Restricoes das arestas iguais a zero
        for (i,j) in I:
            if ((i,j) in edges) or ((j,i) in edges):
                a_le = []
                for e in I:
                    if e == (i,j):
                        a_le.append(1)
                    elif e != (i,j):
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
            else:
                a_eq = []
                for e in I:
                    if e == (i,j):
                        a_eq.append(1)
                    elif e != (i,j):
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
                
        # Restricoes do caminho/ciclo L
        answer = is_cycle(L)
        if answer == True:        
            total_weight = 0.0
            for i in range(len(L)-1):
                total_weight += G0[L[i]][L[i+1]]["weight"]
            return total_weight    
        elif answer == False:
            edges_on_L = []        
            if len(L) > 1:
                for index in range(len(L)-1):
                    edges_on_L.append((L[index], L[index+1]))
                for (i,j) in edges_on_L:
                    a_eq = []
                    for e in I:
                        if e == (i,j):
                            a_eq.append(1)
                        elif e != (i,j):
                            a_eq.append(0)
                    A_eq.append(a_eq)
                    b_eq.append(1)
        
        # o maximo da entrada em cada vertice eh igual a 1
        for v in nodes:
            if v == 1:
                # a somatoria dos arcos de entrada em 1
                # deve ser exatamente 0
                a_eq = []
                for (i,j) in I:
                    if j == v:
                        a_eq.append(1)
                    elif j != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
                
                # a somatoria dos arcos de saida em 1 deve ser
                # exatamente 1
                a_eq = []
                for (i,j) in I:
                    if i == v:
                        a_eq.append(1)
                    elif i != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(1)
                
                
            if v == 0:            
                # a somatoria dos arcos de entrada em 0
                # deve ser exatamente 1
                a_eq = []
                for (i,j) in I:
                    if j == v:
                        a_eq.append(1)
                    elif j != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(1)
                
                # a somatoria dos arcos de saida em 0 deve ser
                # exatamente 0
                a_eq = []
                for (i,j) in I:
                    if i == v:
                        a_eq.append(1)
                    elif i != v:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
                
            elif v not in [0,1]:
                # a somatoria dos arcos de entrada em 1 deve ser
                # menor ou igual a 1
                a_le = []
                for (i,j) in I:
                    if j == v:
                        a_le.append(1)
                    elif j != v:
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
                
                # a somatoria dos arcos de saida em 1 deve ser
                # menor ou igual a 1
                a_le = []
                for (i,j) in I:
                    if i == v:
                        a_le.append(1)
                    elif i != v:
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
                
                # Conservacao do fluxo
                a_eq = []
                for (i,j) in I:
                    if i == v:
                        a_eq.append(1)
                    elif j == v:
                        a_eq.append(-1)
                    else:
                        a_eq.append(0)
                A_eq.append(a_eq)
                b_eq.append(0)
            
        # nao pode usar dois arcos com o mesmas extremidades
        for e in edges:
            if (1 not in e) and (0 not in e):
                u = e[0]
                v = e[1]
                a_le = []
                for (i,j) in I:
                    if (i == u and j == v) or (i == v and j == u):
                        a_le.append(1)
                    else:
                        a_le.append(0)
                A_le.append(a_le)
                b_le.append(1)
    
    
        '''
        # impedir "falso ciclo"
        for v in [u for u in G0[1]]:
            a_le = []
            for (i,j) in I:
                if (i,j) == (1,v) or (i,j) == (v,0):
                    a_le.append(1)
                else:
                    a_le.append(0)
            A_le.append(a_le)
            b_le.append(1)
        '''
    
            
        X = lp(c, A_le, b_le, A_eq, b_eq,method="revised simplex")
        #print("Upper bound four for {} is {}".format(L,-X['fun']),file=sys.stderr)
        #print(X['x'])
        
        if X["status"] == 0:
            return -X['fun']
        elif X["status"] == 2:
            #print("A solucao parcial {} eh infactivel.".format(L,file=sys.stderr))
            return (-inf)

    def recursive_ordered_branch_and_bound_max_cycle(L):
        
        nonlocal G
        nonlocal opt_cycle
        nonlocal opt
        
        nonlocal contador_de_nos
        nonlocal contador_nos_cortados        
            
        answer = is_cycle(L)
        if answer == True:
            total_weight = 0.0
            for i in range(len(L)-1):
                total_weight += G[L[i]][L[i+1]]["weight"]
                
            if total_weight > opt:
                opt = total_weight
                opt_cycle = L
                return
            
        elif answer == "Infeseable":
            return
        
        elif answer == False:
            
            start = L[0]
            end = L[-1]
            neighbors = [v for v in G[end]]
            
            if len(neighbors) == 0:
                return
            
            bounds = []
            for v in neighbors:
                if v == start or v not in L:
                    contador_de_nos += 1
                    bounds.append((v,upper_bound(L+[v])))
                    
            bounds = sorted(bounds, key = lambda x : x[1], reverse = True)
            
            for (v,B) in bounds:
                if B >= opt:
                    recursive_ordered_branch_and_bound_max_cycle(L + [v])
                elif B < opt:
                    contador_nos_cortados += 1
                    
    start = time.time()
    
    recursive_ordered_branch_and_bound_max_cycle([1])
    
    end = time.time()
    
    print("Relatorio da execucao do algoritmo de ordered branch-and-bound",file=sys.stderr)
    print("Otimo encontrado eh {}".format(opt),file=sys.stderr)
    print("Ciclo otimo encontrado eh {}".format(opt_cycle),file=sys.stderr)
    print("Numero total de nos visitados: {}".format(contador_de_nos),file=sys.stderr)
    print("Numero total de nos cortados: {}".format(contador_nos_cortados),file=sys.stderr)
    print("Tempo total de execucao: {}".format(end-start),file=sys.stderr)                    
                    
    print(opt)
    cycle_str = '1'
    for v in opt_cycle[1:]:
        cycle_str += (' ' + str(v))
    print(cycle_str)


ordered_branch_and_bound_max_cycle(G)
